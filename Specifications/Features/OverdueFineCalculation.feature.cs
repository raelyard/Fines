// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.34014
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace MediaLoanLibrary.Fines.Specifications.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Overdue Fine Calculation")]
    public partial class OverdueFineCalculationFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "OverdueFineCalculation.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Overdue Fine Calculation", "In order to incentivize the return of library property\nAs a library operator\nI wa" +
                    "nt to charge fines for overdue media", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Calculate Fines For Overdue Days Less Than Replacement Cost Deadline")]
        [NUnit.Framework.TestCaseAttribute("0", "0.00", null)]
        [NUnit.Framework.TestCaseAttribute("1", "0.00", null)]
        [NUnit.Framework.TestCaseAttribute("2", "0.00", null)]
        [NUnit.Framework.TestCaseAttribute("3", "0.75", null)]
        [NUnit.Framework.TestCaseAttribute("4", "1.00", null)]
        [NUnit.Framework.TestCaseAttribute("10", "2.50", null)]
        [NUnit.Framework.TestCaseAttribute("29", "7.25", null)]
        public virtual void CalculateFinesForOverdueDaysLessThanReplacementCostDeadline(string days, string fine, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Calculate Fines For Overdue Days Less Than Replacement Cost Deadline", exampleTags);
#line 6
this.ScenarioSetup(scenarioInfo);
#line 7
 testRunner.Given(string.Format("A loan is overdue by {0} days", days), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 8
 testRunner.When("I calculate the overdue fine", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 9
 testRunner.Then(string.Format("I should see a fine of ${0}", fine), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Calculate Fines For Overdue Days At Or Beyond Replacement Cost Deadline")]
        [NUnit.Framework.TestCaseAttribute("30", "3.00", "3.00", null)]
        [NUnit.Framework.TestCaseAttribute("30", "9.95", "9.95", null)]
        [NUnit.Framework.TestCaseAttribute("30", "1000000.00", "1000000.00", null)]
        [NUnit.Framework.TestCaseAttribute("60", "3.00", "3.00", null)]
        [NUnit.Framework.TestCaseAttribute("60", "9.95", "9.95", null)]
        [NUnit.Framework.TestCaseAttribute("60", "1000000.00", "1000000.00", null)]
        [NUnit.Framework.TestCaseAttribute("90", "3.00", "3.00", null)]
        [NUnit.Framework.TestCaseAttribute("90", "9.95", "9.95", null)]
        [NUnit.Framework.TestCaseAttribute("90", "1000000.00", "1000000.00", null)]
        public virtual void CalculateFinesForOverdueDaysAtOrBeyondReplacementCostDeadline(string days, string replacementValue, string fine, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Calculate Fines For Overdue Days At Or Beyond Replacement Cost Deadline", exampleTags);
#line 21
this.ScenarioSetup(scenarioInfo);
#line 22
 testRunner.Given(string.Format("A loan for an item with replacement value ${0} is overdue by {1} days", replacementValue, days), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 23
 testRunner.When("I calculate the overdue fine", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 24
 testRunner.Then(string.Format("I should see a fine of ${0}", fine), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Calculate Fines for Lower Valued Items With Ceiling on Fine At Replacement Value")]
        [NUnit.Framework.TestCaseAttribute("11", "3.00", "2.75", null)]
        [NUnit.Framework.TestCaseAttribute("13", "3.00", "3.00", null)]
        [NUnit.Framework.TestCaseAttribute("29", "3.00", "3.00", null)]
        public virtual void CalculateFinesForLowerValuedItemsWithCeilingOnFineAtReplacementValue(string days, string replacementValue, string fine, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Calculate Fines for Lower Valued Items With Ceiling on Fine At Replacement Value", exampleTags);
#line 39
this.ScenarioSetup(scenarioInfo);
#line 40
 testRunner.Given(string.Format("A loan for an item with replacement value ${0} is overdue by {1} days", replacementValue, days), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 41
 testRunner.When("I calculate the overdue fine", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 42
 testRunner.Then(string.Format("I should see a fine of ${0}", fine), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
